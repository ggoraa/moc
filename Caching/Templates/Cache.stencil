
// swiftlint:disable all
import Cache
import TDLibKit


{% for type in types.implementing.AutoCacheable %}
// MARK: - {{type.name}}
public class {{type.name}}Cache {
    public typealias Key = {{type.typealiases.CacheKey.typeName}}
    public typealias Value = {{type.name}}
    
    private let storage: Storage<Key, Value>?

    init() {
        self.storage = try? Storage(
            diskConfig: DiskConfig(name: "{{type.name}}Cache"),
            memoryConfig: MemoryConfig(),
            transformer: TransformerFactory.forCodable(ofType: Value.self)
        )
    }

    public subscript(key: Key) -> Value? {
        get {
            return try? self.storage?.object(forKey: key)
        }
        set {
            if let value = newValue {
                _ = try? self.storage?.setObject(value, forKey: key)
            } else {
                _ = try? self.storage?.removeObject(forKey: key)
            }
        }
    }
}

{% endfor %}
