// Secrets.swift.gyb

import Foundation

// swiftlint:disable trailing_whitespace trailing_comma
public struct Secret {
%{
import os

def chunks(seq, size):
    return (seq[i:(i + size)] for i in range(0, len(seq), size))

def encode(string, cipher):
    bytes = string.encode("UTF-8")
    return [ord(chr(bytes[i])) ^ cipher[i % len(cipher)] for i in range(0, len(bytes))]
}%
    private static let salt: [UInt8] = [
    %{ salt = [ord(byte) for byte in str(os.urandom(64))] }%
    % for chunk in chunks(salt, 8):
        ${"".join(["0x%02x, " % byte for byte in chunk])}
    % end
    ]

    public static var apiId: Int {
        let encoded: [UInt8] = [
        % for chunk in chunks(encode(os.environ.get('API_ID'), salt), 8):
            ${"".join(["0x%02x, " % byte for byte in chunk])}
        % end
        ]

        return Int(decode(encoded, cipher: salt))!
    }

    public static var apiHash: String {
        let encoded: [UInt8] = [
        % for chunk in chunks(encode(os.environ.get('API_HASH'), salt), 8):
            ${"".join(["0x%02x, " % byte for byte in chunk])}
        % end
        ]

        return decode(encoded, cipher: salt)
    }
    
    public static var appCenterSecret: String {
        let encoded: [UInt8] = [
        % for chunk in chunks(encode(os.environ.get('APP_CENTER_SECRET'), salt), 8):
            ${"".join(["0x%02x, " % byte for byte in chunk])}
        % end
        ]

        return decode(encoded, cipher: salt)
    }

    public static func decode(_ encoded: [UInt8], cipher: [UInt8]) -> String {
        String(decoding: encoded.enumerated().map { (offset, element) in
            element ^ cipher[offset % cipher.count]
        }, as: UTF8.self)
    }
    
    private init() { } // Just to disable instantiation
}
